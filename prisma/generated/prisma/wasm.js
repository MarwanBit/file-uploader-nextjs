
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.FolderScalarFieldEnum = {
  id: 'id',
  folder_name: 'folder_name',
  display_name: 'display_name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  is_root: 'is_root',
  s3_link: 's3_link',
  shared: 'shared',
  expires_at: 'expires_at',
  parent_folder_id: 'parent_folder_id',
  owner_clerk_id: 'owner_clerk_id',
  s3_key: 's3_key',
  shareToken: 'shareToken'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  file_name: 'file_name',
  size: 'size',
  created_at: 'created_at',
  shared: 'shared',
  s3_link: 's3_link',
  expires_at: 'expires_at',
  parent_folder_id: 'parent_folder_id',
  owner_clerk_id: 'owner_clerk_id',
  s3_key: 's3_key'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Folder: 'Folder',
  File: 'File'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/marwanbit/Documents/GitHub/file-uploader-nextjs/prisma/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/marwanbit/Documents/GitHub/file-uploader-nextjs/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../..",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"./generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Folder {\n  id               String    @id @default(uuid())\n  folder_name      String\n  display_name     String? // User-friendly display name (firstName + lastName for root folders)\n  created_at       DateTime  @default(now())\n  updated_at       DateTime  @updatedAt\n  is_root          Boolean   @default(false)\n  s3_link          String?\n  shared           Boolean   @default(false)\n  expires_at       DateTime?\n  parent_folder_id String?\n  owner_clerk_id   String\n  s3_key           String?\n  shareToken       String?   @unique\n  files            File[]    @relation(\"FilesToFolder\")\n  parent_folder    Folder?   @relation(\"FolderToParentFolder\", fields: [parent_folder_id], references: [id])\n  subfolders       Folder[]  @relation(\"FolderToParentFolder\")\n}\n\nmodel File {\n  id               String    @id @default(uuid())\n  file_name        String\n  size             Int\n  created_at       DateTime  @default(now())\n  shared           Boolean   @default(false)\n  s3_link          String?\n  expires_at       DateTime?\n  parent_folder_id String?\n  owner_clerk_id   String\n  s3_key           String?\n  parent_folder    Folder?   @relation(\"FilesToFolder\", fields: [parent_folder_id], references: [id])\n}\n",
  "inlineSchemaHash": "397f53c34cadcab2956fb02eb9d6f1c1fbd920269985db120c60e2d533d5d290",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Folder\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"folder_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"display_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"is_root\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"s3_link\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"shared\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"expires_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"parent_folder_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"owner_clerk_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"s3_key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"shareToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"files\",\"kind\":\"object\",\"type\":\"File\",\"relationName\":\"FilesToFolder\"},{\"name\":\"parent_folder\",\"kind\":\"object\",\"type\":\"Folder\",\"relationName\":\"FolderToParentFolder\"},{\"name\":\"subfolders\",\"kind\":\"object\",\"type\":\"Folder\",\"relationName\":\"FolderToParentFolder\"}],\"dbName\":null},\"File\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"file_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"size\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"shared\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"s3_link\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"parent_folder_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"owner_clerk_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"s3_key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parent_folder\",\"kind\":\"object\",\"type\":\"Folder\",\"relationName\":\"FilesToFolder\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

